(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{200:function(t,o,n){"use strict";n.r(o);var e=n(0),c=Object(e.a)({},function(){var t=this,o=t.$createElement,n=t._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("js的数据类型分两大类。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("基本数据类型：number,string,bollean,undefined,null。")])]),t._v(" "),n("li",[n("p",[t._v("引用数据类型：object,function,array,regExp,date\n要判断变量属于哪种数据类型。通常有以下几种方法。")])]),t._v(" "),n("li",[n("p",[t._v("typeof\n看以下几个列子，就知道typeof的作用了。")]),t._v(" "),n("pre",[n("code",[t._v('  const foo = function() {}\n  typeof 1 //"number"\n  typeof \'1\' //"string"\n  typeof [] //"object"\n  typeof {} //"object"\n  typeof false // "bollean"\n  typeof null // "object"\n  typeof undefined //  "undefined"\n  typeof foo // "function"\n')])])])]),t._v(" "),n("p",[t._v("从上面这些例子可以看出，typeof value返回一个字符串，这个字符串就是对应着变量的数据类型，有number,string,object,undefined,function,bollean这几种。\n从上面的列子不难看出，用typeof检测数据类型有一定的"),n("strong",[t._v("局限性")]),t._v('：\n数组和对象返回的都是"object",无法判断变量是数组还是对象。\n'),n("strong",[t._v("特点")]),t._v("\n（1）对于基本数据类型，除了"),n("strong",[t._v("null返回object")]),t._v(",其余的都返回正常的结果。\n（2）对于引用类型，除了"),n("strong",[t._v("function返回function")]),t._v(",其余都返回object。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("instanceof\ninstanceof用来检测A是B的实列，返回的结果是一个boolean值**（检测的是原型）**")])]),t._v(" "),n("li",[n("p",[t._v("Object.prototype.toString\ntoString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。")]),t._v(" "),n("pre",[n("code",[t._v("  Object.prototype.toString.call('') ;   // [object String]\n  Object.prototype.toString.call(1) ;    // [object Number]\n  Object.prototype.toString.call(true) ; // [object Boolean]\n  Object.prototype.toString.call(Symbol()); //[object Symbol]\n  Object.prototype.toString.call(undefined) ; // [object Undefined]\n  Object.prototype.toString.call(null) ; // [object Null]\n  Object.prototype.toString.call(new Function()) ; // [object Function]\n  Object.prototype.toString.call(new Date()) ; // [object Date]\n  Object.prototype.toString.call([]) ; // [object Array]\n  Object.prototype.toString.call(new RegExp()) ; // [object RegExp]\n  Object.prototype.toString.call(new Error()) ; // [object Error]\n  Object.prototype.toString.call(document) ; // [object HTMLDocument]\n  Object.prototype.toString.call(window) ; //[object global] window 是全局对象 global 的引用\n")])])])])])},[],!1,null,null,null);o.default=c.exports}}]);